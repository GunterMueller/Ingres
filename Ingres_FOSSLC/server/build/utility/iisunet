#!/bin/bash
#
#  Copyright (c) 2001, 2004 Ingres Corporation
#
#  Name:
#	iisunet -- set-up script for Ingres Networking
#
#  Usage:
#	iisunet [ host ]
#
#  Description:
#	This script should only be called by the Ingres installation
#	utility or by the ingmknfs wrapper.  It sets up Ingres Networking
#	on a client or server.
#
#  Exit Status:
#	0	setup procedure completed.
#	1	setup procedure did not complete.
#
#  PROGRAM = iisunet
#
#  DEST = utility
#----------------------------------------------------------------------------

if [ "$1" = "-rmpkg" ] ; then
   II_CONF_DIR=$II_SYSTEM/ingres/files
 
   cp -p $II_CONF_DIR/config.dat $II_CONF_DIR/config.tmp
 
   trap "cp -p $II_CONF_DIR/config.tmp $II_CONF_DIR/config.dat; \
         rm -f $II_CONF_DIR/config.tmp; exit 1" 1 2 3 15
 
   cat $II_CONF_DIR/config.dat | grep -v 'gcc' | \
       grep -v '\.net'  >$II_CONF_DIR/config.new
 
   rm -f $II_CONF_DIR/config.dat
 
   mv $II_CONF_DIR/config.new $II_CONF_DIR/config.dat
 
   rm -f $II_CONF_DIR/config.tmp
 
   cat << !
  Ingres Networking has been removed.
 
!
 
else

. iisysdep
  
. iishlib
   
ACTUAL_HOSTNAME=$HOSTNAME

[ "$VERS" = "hpb_us5" -o "$VERS" = "hp8_us5" ] && [ ! -d "/opt/sna/lib" ] &&
{
	[ -f $II_SYSTEM/ingres/lib/libappc.1 ] && rm $II_SYSTEM/ingres/lib/libappc.1
	[ -f $II_SYSTEM/ingres/lib/libcsv.1 ] && rm $II_SYSTEM/ingres/lib/libcsv.1
	[ -f $II_SYSTEM/ingres/lib/libmgr.sl ] && rm $II_SYSTEM/ingres/lib/libmgr.sl
	ln -s $II_SYSTEM/ingres/lib/libcompat.1.sl $II_SYSTEM/ingres/lib/libappc.1
	ln -s $II_SYSTEM/ingres/lib/libcompat.1.sl $II_SYSTEM/ingres/lib/libcsv.1
	ln -s $II_SYSTEM/ingres/lib/libcompat.1.sl $II_SYSTEM/ingres/lib/libmgr.sl
}

BATCH=false
NOTBATCH=true
INSTLOG="2>&1 | tee -a $II_SYSTEM/ingres/files/install.log"
WRITE_RESPONSE=false
READ_RESPONSE=false
RESOUTFILE=ingrsp.rsp
RESINFILE=ingrsp.rsp
IGNORE_RESPONSE="true"
export IGNORE_RESPONSE
RPM=false
BATCH=false
NOTBATCH=true
INSTLOG="2>&1 | tee -a $II_SYSTEM/ingres/files/install.log"
SELF=`basename $0`

while [ $# != 0 ]
do
# check for batch flag
    if [ "$1" = "-batch" ] ; then
       BATCH=true
       NOTBATCH=false
       INSTLOG="2>&1 | cat >> $II_SYSTEM/ingres/files/install.log"
       shift ;
    elif [ "$1" = "-rpm" ] ; then
       RPM=true
       BATCH=true
       NOTBATCH=false
       INSTLOG="2>&1 | cat >> $II_SYSTEM/ingres/files/install.log"
       shift ;
    elif [ "$1" = "-mkresponse" ] ; then
       WRITE_RESPONSE=true
       BATCH=false
       NOTBATCH=true
       shift;
       if [ "$1" ] ; then
            RESOUTFILE="$1"
            shift ;
       fi
    elif [ "$1" = "-exresponse" ] ; then
       READ_RESPONSE=true
       BATCH=true
       NOTBATCH=false
       shift;
       if [ "$1" ] ; then
            RESINFILE="$1"
            shift ;
       fi
    elif [ "$1" = "-vbatch" ] ; then
       BATCH=true
       NOTBATCH=false
       shift;
    fi
    
    export WRITE_RESPONSE
    export READ_RESPONSE
    export RESOUTFILE
    export RESINFILE
    
done

       [ "$1" ] &&
       {
	    # reset HOSTNAME for remote NFS-client
  	    HOSTNAME=$1
  	    CONFIG_HOST=`echo $HOSTNAME | sed "s/[.]/_/g"`
  	    CLIENT_ADMIN=$II_SYSTEM/ingres/admin/$HOSTNAME
	    shift
       }
    
trap "rm -f $II_SYSTEM/ingres/files/config.lck /tmp/*.$$ 1>/dev/null \
2>/dev/null; exit 1" 0 1 2 3 15

do_setup()
{
echo "Setting up Ingres Networking..."

trap "rm -f $II_SYSTEM/ingres/files/config.lck /tmp/*.$$ 1>/dev/null \
2>/dev/null; exit 1" 0 1 2 3 15

# create the response file if it does not exist.
check_response_file #check for response files.

iisulock "Ingres Networking setup" || exit 1
	
touch_files # make sure symbol.tbl and config.dat exists

if [ "$WRITE_RESPONSE" = "true" ] ; then
     mkresponse_msg
else ## **** Skip everything that we do in WRITE_RESPONSE mode ****

if [ "$II_CONFIG_LOCAL" ] ; then
# create backup of original config.dat - if config.nfs already exists
# we bombed out of an earlier NFS client creation so restore the
# original config.dat and keep the nfs backup
   if [ -f $II_SYSTEM/ingres/files/config.nfs ] ; then
      cp -p $II_SYSTEM/ingres/files/config.nfs \
            $II_SYSTEM/ingres/files/config.dat
   else
      cp -p $II_SYSTEM/ingres/files/config.dat \
            $II_SYSTEM/ingres/files/config.nfs
   fi
fi

# grant owner and root all privileges
iisetres ii.$CONFIG_HOST.privileges.user.root \
   SERVER_CONTROL,NET_ADMIN,MONITOR,TRUSTED
iisetres ii.$CONFIG_HOST.privileges.user.$ING_USER \
   SERVER_CONTROL,NET_ADMIN,MONITOR,TRUSTED

fi #end WRITE_RESPONSE mode

if [ -f $II_SYSTEM/ingres/install/release.dat ]; then
   VERSION=`$II_SYSTEM/ingres/install/ingbuild -version=net` ||
   {
       cat << !

$VERSION

!
      exit 1
   }
else
   VERSION=`head -1 $II_SYSTEM/ingres/version.rel` ||
   {
       cat << !

Missing file $II_SYSTEM/ingres/version.rel

!
      exit 1
   }
fi


if [ "$WRITE_RESPONSE" = "false" ] ; then

RELEASE_ID=`echo $VERSION | sed "s/[ ().\/]//g"`

SETUP=`iigetres ii.$CONFIG_HOST.config.net.$RELEASE_ID` || exit 1

[ "$SETUP" = "complete" ] &&
{
   cat << !

The $VERSION version of Ingres Networking has already been
set up on "$HOSTNAME".

!
   $BATCH || pause
   trap : 0
   clean_exit
}

#
# The following will determine what type of installation (Server,
# NFS-client or non-NFS-client) we are dealing with. 
#
CONFIG_SERVER_HOST=`iigetres ii."*".config.server_host`

SERVER_HOST=`iigetres ii.$CONFIG_SERVER_HOST.gcn.local_vnode`

fi # end of WRITE_RESPONSE mode 

SERVER_SETUP=false
NONNFS_CLIENT_SETUP=false
if [ "$WRITE_RESPONSE" = "true" ] ; then
    cat << !

You can configure the response file to set up networking either 
    1) In a DBMS server installation. 
or  2) In a non NFS client installation.
For more detail about setting up netwoking refer to the Installation Guide.

!
if  prompt "Do you wish to configure response file to set up networking \n in a DBMS server installation?" y 
then
    SERVER_SETUP=true
    cat << !

This procedure will set up networking for Server Installation.
!
else
    NONNFS_CLIENT_SETUP=true
    cat << !

This procedure will set up networking for non-NFS client 
!
fi
cat << !

Note: The -mkresponse option does not allow you to specify an 
installation password during the setup procedure nor allow authorizing 
yourself (the installation owner) or all "$HOSTNAME" users
for access to the default server. You must specify this later, using the 
Ingres Network Utility or Visual DBA (see the System Administrator Guide) 
or the netutil utility (see the Command Reference Guide).

!
prompt "Do you want to continue this setup procedure?" y || exit 1
elif  [ "$SERVER_HOST" ] && [ "$SERVER_HOST" = "$HOSTNAME" ] ; then
    SERVER_SETUP=true
elif $CLUSTERSUPPORT ; then
    CLUSTER_ID="`iigetres ii.$CONFIG_HOST.config.cluster.id`"
    case "$CLUSTER_ID" in
    [1-9]|[12][0-9]|3[0-2])	# Setup for cluster
	SERVER_SETUP=true
	;;
    *)				# normal non-server setup.
	CLUSTER_ID=""
	SERVER_SETUP=false
	;;
    esac
else
    SERVER_SETUP=false
fi

# if we are generating a response file for server installation or
# serverhost is set and serverhost is not changed for nfs installation
#
if [ "$SERVER_SETUP" = "true" ] ; then
   # configuring Ingres Networking on a server

  if [ "$WRITE_RESPONSE" = "false" ] ; then

   SERVER_SETUP=`iigetres ii.$CONFIG_SERVER_HOST.config.dbms.$RELEASE_ID`
   # Never bail here for RPM installs. Sometimes iisunet gets run first
   [ "$SERVER_SETUP" != "complete" ] && [ ! "$RPM" ] &&
   {
      cat << !

The setup procedure for the following version of the Ingres Intelligent
DBMS:

	$VERSION

must be completed up before Ingres Networking can be set up on this host:

	$HOSTNAME

!
      exit 1
   }

   [ -z "$II_INSTALLATION" ] && II_INSTALLATION=`ingprenv II_INSTALLATION`
   [ -z "$II_INSTALLATION" ] &&
   {
      cat << ! 

II_INSTALLATION is not set!  Setup aborted.

!
      exit 1
   }
fi # end WRITE_RESPONSE
   cat << ! 

This procedure will set up the following version of Ingres Networking:

	$VERSION

to run on local host:

	$HOSTNAME

The Ingres Intelligent DBMS has been set up on this host; therefore,
this installation has the capacity to act as an Ingres "server", which
means it can service queries against local Ingres databases.  An
Ingres server can also service remote queries if Ingres Networking
is installed.

If you do not need access to this Ingres server from other hosts,
then you do not need to set up Ingres Networking.

!


   $BATCH || prompt "Do you want to continue this setup procedure?" y \
      || exit 1

  if [ "$WRITE_RESPONSE" = "false" ] ; then
   if [ "$SETUP" != "defaults" ] ; then
      # generate default configuration resources
      echo ""
      echo "Generating default configuration..."
      NET_RFM_FILE=$II_SYSTEM/ingres/files/net.rfm

      if iigenres $CONFIG_HOST $NET_RFM_FILE ; then
         iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID defaults
      else
         cat << !
An error occurred while generating the default configuration.
 
!
         exit 1
      fi
   else
      cat << !

Default configuration generated.
!
   fi #end SETUP !=defaults

   # display II_INSTALLATION 
   cat << !
   
II_INSTALLATION configured as $II_INSTALLATION. 

!
  fi #end of WRITE_RESPONSE mode
else
   # configuring Ingres Networking on a client

   if [ "$SERVER_HOST" ] ; then
      # NFS-client setup

      NFS_CLIENT=true

  if [ "$WRITE_RESPONSE" = "false" ] ; then

      # get server's installation code 
      SERVER_ID=`eval II_ADMIN=$II_SYSTEM/ingres/files \
         ingprenv II_INSTALLATION`

      # determine whether Ingres Networking is set up locally  
      SERVER_NET_SETUP=`iigetres ii.$CONFIG_SERVER_HOST.config.net.$RELEASE_ID`

      [ "$SERVER_NET_SETUP" != "complete" ] &&
      {
         cat << !

The setup procedure for the following version of Ingres Networking:

	$VERSION

must be completed for the Ingres server installation "$SERVER_ID" on
host:

	$SERVER_HOST

before any Ingres NFS-clients can be set up. 

!
         exit 1
      }

      cat << !

This procedure will set up the following version of Ingres Networking:

	$VERSION

to run on host:

	$HOSTNAME

This procedure will set up an Ingres NFS-client which will enable
users on "$HOSTNAME" to access databases stored in installation "$SERVER_ID" on
host:

	$SERVER_HOST

An Ingres NFS-client installation uses Network File System services
to share executables and other files with an Ingres server installation.

!
      $BATCH || prompt "Do you want to continue this setup procedure?" y \
         || exit 1

  fi # end of WRITE_RESPONSE

      if [ "$HOSTNAME" != "$ACTUAL_HOSTNAME" ] ; then
         # remote NFS-client setup, so prompt for remote (mounted) II_SYSTEM

         SERVER_PASSWD=`iigetres ii.$CONFIG_SERVER_HOST.setup.passwd.$RELEASE_ID`
         cat << !

In order to set up an Ingres NFS-client remotely (i.e.  while running
on the local server "$SERVER_HOST"), you must know the remote path name
which will be used to NFS-mount the local Ingres directory tree.

If you do not know the correct value for II_SYSTEM (i.e. as it will
appear "$HOSTNAME") do not attempt to complete this setup procedure.

!
         if [ "$SERVER_PASSWD" = "on" ] || [ "$SERVER_PASSWD" = "ON" ] ; then 
            cat << !
Also note that although an Ingres installation password was created
for this server during the local setup procedure, you cannot create 
an installation password authorization for any users on the remote
host during this procedure, since Ingres Networking authorization
information can only be administered on the remote host.

If you want to create an installation password authorization for users
on the remote host during this procedure, you must run this program
on the client system.

!
         fi

         $BATCH || prompt "Do you want to continue this setup procedure?" y || exit 1

         NOT_DONE=true
         while $NOT_DONE ; do
	    $BATCH && NOT_DONE=false
            echo ""
            $BATCH || echo "Enter the value of II_SYSTEM as it will appear on $HOSTNAME:"
            $BATCH || read SERVER_II_SYSTEM junk
            cat << !

The remainder of this procedure assumes that the following value of
II_SYSTEM on $HOSTNAME is correct:

	$SERVER_II_SYSTEM

Make sure that this is the correct path name, since the resulting
installation will be unusable otherwise. 

!
            $BATCH || prompt "Is this the path name correct?" y && NOT_DONE=false 
         done
      else
         SERVER_II_SYSTEM=$II_SYSTEM
      fi

      if [ "$WRITE_RESPONSE" = "true" ] ; then
	    check_response_write NET_SERVER_II_SYSTEM $SERVER_II_SYSTEM replace
      fi

      if [ "$READ_RESPONSE" = "true" ] ; then
            RESVAL=`iiread_response SERVER_II_SYSTEM $RESINFILE`
            if [ ! -z "$RESVAL" ] ; then
                SERVER_II_SYSTEM=$RESVAL      
            fi
      fi

  if [ "$WRITE_RESPONSE" = "false" ] ; then

      # create the admin directory for this client
      ADMIN_ROOT=$II_SYSTEM/ingres/admin
      CLIENT_ADMIN=$ADMIN_ROOT/$HOSTNAME
   
      [ ! -d $ADMIN_ROOT ] &&
      {
         mkdir $ADMIN_ROOT
         chmod 755 $ADMIN_ROOT 
      }
   
      [ ! -d $CLIENT_ADMIN ] &&
      {
         mkdir $CLIENT_ADMIN
         chmod 755 $CLIENT_ADMIN
      }
  fi #end of WRITE_RESPONSE mode

      # create symbol.tbl if it doesn't exist
      [ -f $CLIENT_ADMIN/symbol.tbl ] ||
      {
         touch $CLIENT_ADMIN/symbol.tbl ||
         {
            cat << !

Unable to create $CLIENT_ADMIN/symbol.tbl.  Exiting...

!
            exit 1
         }
      }

  if [ "$WRITE_RESPONSE" = "false" ] ; then

      # II_CONFIG _must_ be set in the client's symbol.tbl
      II_CONFIG=`ingprenv II_CONFIG`
      if [ -z "$II_CONFIG" ] || [ "$HOSTNAME" != "$ACTUAL_HOSTNAME" ] ; then
         eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_CONFIG \
            $SERVER_II_SYSTEM/ingres/files
      fi

      # reset II_CONFIG in case it was unset
      II_CONFIG=`ingprenv II_CONFIG`


      if [ "$SETUP" != defaults ] ; then
         cat << !

Generating default configuration...
!
	 # Bug 78211 - if server is SQL-92, set client to be as well

         SQL_92=`iigetres ii.$SERVER_HOST.fixed_prefs.iso_entry_sql-92`
         if [ "$SQL_92" = "ON" ] ; then
            iisetres ii.$CONFIG_HOST.fixed_prefs.iso_entry_sql-92 ON
         fi

	NET_RFM_FILE=$II_SYSTEM/ingres/files/net.rfm

	if iigenres $CONFIG_HOST $NET_RFM_FILE ; then
            iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID defaults
         else
            cat << !
An error occurred while generating the default configuration.
 
!
            exit 1
         fi
      else
         cat << !

Default configuration generated.
!
      fi
  fi #end of WRITE_RESPONSE mode

      # get II_INSTALLATION 
      II_INSTALLATION=`eval II_ADMIN=$CLIENT_ADMIN ingprenv II_INSTALLATION`
      if [ "$II_INSTALLATION" ]
      then 
         cat << !
      
II_INSTALLATION configured as $II_INSTALLATION. 
!
      else
         DEFAULT=$SERVER_ID
         if $BATCH ; then
            if [ "$READ_RESPONSE" = "true" ] ; then
	       II_INSTALLATION=`iiread_response II_INSTALLATION $RESINFILE` 
	       if [ -z "$II_INSTALLATION" ] ; then
		  II_INSTALLATION=$DEFAULT
	       fi	
            elif [ "$2" ] ; then
               case "$2" in 
                  [a-zA-Z][a-zA-Z0-9])
                     II_INSTALLATION="$2"
                     ;;
                  *)
                     cat << !

The installation code you have specified is invalid. The first character
code must be a letter; the second may be a letter or a number.

!
                     exit 1
                     ;;
               esac
            else
               II_INSTALLATION=$DEFAULT
            fi
         else
            get_installation_code 
         fi
      fi

      if [ "$WRITE_RESPONSE" = "true" ] ; then
            eval check_response_write II_INSTALLATION $II_INSTALLATION replace
      else

      # get other defaults from server symbol.tbl 
      II_TEMPORARY=`eval II_ADMIN=$II_SYSTEM/ingres/files \
         ingprenv II_TEMPORARY`
      ING_EDIT=`eval II_ADMIN=$II_SYSTEM/ingres/files ingprenv ING_EDIT`

      SERVER_VNODE=$SERVER_HOST

      # set gcn remote_vnode resource
      iisetres ii.$CONFIG_HOST.gcn.remote_vnode $SERVER_VNODE
	
      fi #end of WRITE_RESPONSE mode
   else # non-NFS-client setup 
      NFS_CLIENT=false
      
      cat << !

This procedure will set up the following version Ingres Networking:

	$VERSION

to run on local host:

	$HOSTNAME

This procedure will set up a non-NFS Ingres client installation which
will allow you to access (remote or local) Ingres servers, without
using Network File System services to share executables and other files
with the server installation.

!
      $BATCH || prompt "Do you want to continue this setup procedure?" y \
         || exit 1

$NONNFS_CLIENT_SETUP  ||
{
      cat << !

After you set up Ingres Networking in this installation, you will have the
capability to establish connections to Ingres server(s).  In order
to connect to an Ingres server, Ingres Networking must be set up on
the server(s) and the necessary Ingres Networking authorizations must
be created. 

!
      cat << !
As part of this procedure, you will be able to create an Ingres Networking
authorization which allows you (the installation owner) or all "$HOSTNAME"
users to access a default server.

!
      $BATCH || prompt "Do you want to continue this setup procedure?" y \
         || exit 1
}

#check for write_response if set skip
    if [ "$WRITE_RESPONSE" = "false" ] ; then

      if [ "$SETUP" != "defaults" ] ; then
         # generate default configuration resources
         cat << !

Generating default configuration...
!
        NET_RFM_FILE=$II_SYSTEM/ingres/files/net.rfm

        if iigenres $CONFIG_HOST $NET_RFM_FILE ; then
            iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID defaults
         else
            cat << !
An error occurred while generating the default configuration.
 
!
            exit 1
         fi
      else
         cat << !

Default configuration generated.
!
      fi
    fi # end WRITE_RESPONSE mode

      # get II_INSTALLATION 
      II_INSTALLATION=`ingprenv II_INSTALLATION`
      if [ "$II_INSTALLATION" ] ; then 
         cat << !
      
II_INSTALLATION configured as $II_INSTALLATION. 
!
      else
         if $BATCH ; then
	    if [ "$READ_RESPONSE" = "true" ] ; then
	       II_INSTALLATION=`iiread_response II_INSTALLATION $RESINFILE` 
	       [ -z "$II_INSTALLATION" ] && II_INSTALLATION="II"
            elif [ "$2" ] ; then
               II_INSTALLATION="$2"
            else
               II_INSTALLATION="II"
            fi
         else
            get_installation_code 
         fi
      fi
   fi

   if [ "$WRITE_RESPONSE" = "true" ] ; then
	eval check_response_write II_INSTALLATION $II_INSTALLATION replace
   fi 
   # now doing stuff to both NFS and non-NFS-clients

   # get server's character set code
   VALUE=`eval II_ADMIN=$II_SYSTEM/ingres/files \
            ingprenv II_CHARSET$SERVER_ID`
   if [ "$VALUE" ] && [ "$WRITE_RESPONSE" = "false" ] ; then
       # set II_CHARSETxx to same value as server
       if [ "$CLIENT_ADMIN" ] ; then
          eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_CHARSET$II_INSTALLATION \
                               \"$VALUE\"
       else
          ingsetenv II_CHARSET$II_INSTALLATION $VALUE
       fi
       cat << !
 
II_CHARSET$II_INSTALLATION configured as $VALUE.
!
   else # setting character code
       if $BATCH ; then
	  # batch mode default
	  VALUE=ISO88591
	  if [ "$READ_RESPONSE" = "true" ] ; then
             RSP_VALUE=`iiread_response II_CHARSET $RESINFILE`
             if [ ! -z "$RSP_VALUE" ] ; then
               if validate_resource ii."*".setup.ii_charset $RSP_VALUE
               then
                  cat << !
  
Characterset supplied ( $RSP_VALUE ) is illegal.
Character set will be set to default [ $VALUE ]
  
!
               else
                  VALUE=$RSP_VALUE
               fi
             fi
          fi #end READ_RESPONSE
       else
	  cat << !
     
Ingres supports different character sets.  You must now enter the
character set you want to use with this Ingres installation.
 
IMPORTANT NOTE: You will be unable to change character sets once you
make your selection.  If you are unsure of which character set to use,
exit this program and refer to the Ingres Installation Guide.
!
	  # display valid entries
	  iivalres -v ii."*".setup.ii_charset BOGUS_CHARSET
	  DEFAULT="ISO88591"
	  iiechonn "Please enter a valid character set [$DEFAULT] "
	  read VALUE junk
	  [ -z "$VALUE" ] && VALUE=$DEFAULT
	  NOT_DONE=true
	  while $NOT_DONE ; do
	     if [ -z "$VALUE" ] ; then
		VALUE=$DEFAULT
	     elif validate_resource ii."*".setup.ii_charset $VALUE
	     then
		# reprompt
		iiechonn "Please enter a valid character set [$DEFAULT] "
		read VALUE junk
	     else
		CHARSET_TEXT=`iigetres ii."*".setup.charset.$VALUE`
		cat << !
     
The character set you have selected is:
     
	$VALUE ($CHARSET_TEXT)
     
!

		$BATCH || if prompt "Is this the character set you want to use?" y
		then
		   NOT_DONE=false
		else
		   cat << !
 
Please select another character set.
!
		   iivalres -v ii."*".setup.ii_charset BOGUS_CHARSET
		   iiechonn "Please enter a valid character set [$DEFAULT] "
		   read VALUE junk
		fi
	     fi
	  done
       fi #end batch.

     if [ "$WRITE_RESPONSE" = "true" ] ; then
	eval check_response_write II_CHARSET${II_INSTALLATION} $VALUE replace	
     else
       if [ "$CLIENT_ADMIN" ] ; then
          eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_CHARSET$II_INSTALLATION \
                               \"$VALUE\"
       else
          ingsetenv II_CHARSET$II_INSTALLATION $VALUE
       fi
     fi #end WRITE_RESPONSE mode
   fi #setting character code

   if [ "$WRITE_RESPONSE" = "false" ] ; then
   # get defaults from configuration rules
   for SYMBOL in II_TEMPORARY ING_EDIT 
   do
      DEFAULT=`iigetres ii."*".setup.$SYMBOL`
      VALUE=`ingprenv $SYMBOL`
      if [ -z "$VALUE" ] ; then
         if [ "$DEFAULT" ] && [ -z "$VALUE" ] ; then 
            eval "$SYMBOL=`eval echo $DEFAULT`"
         else
            cat << !

ERROR: $SYMBOL not defaulted in rule base.

!
            exit 1
         fi
      else
         eval "$SYMBOL=`eval echo $VALUE`"
      fi
   done
   fi #end WRITE_RESPONSE mode

   # get II_TIMEZONE_NAME value
   II_TIMEZONE_NAME=`eval II_ADMIN=$CLIENT_ADMIN ingprenv II_TIMEZONE_NAME`
   if [ "$II_TIMEZONE_NAME" ] ; then 
      cat << !

II_TIMEZONE_NAME configured as $II_TIMEZONE_NAME. 
   
!
   else
      TZ_RULE_MAP=$II_SYSTEM/ingres/files/net.rfm
      if $BATCH ; then
	 if [ "$READ_RESPONSE" = "true" ] ; then
            II_TIMEZONE_NAME=`iiread_response II_TIMEZONE_NAME $RESINFILE`
         fi
         [ -z "$II_TIMEZONE_NAME" ] && 
		II_TIMEZONE_NAME=`eval II_ADMIN=$II_SYSTEM/ingres/files \
			ingprenv II_TIMEZONE_NAME`
         #If we still cannot set II_TIMEZONE then this should be set to NA-PACIFIC 
         [ -z "$II_TIMEZONE_NAME" ] && II_TIMEZONE_NAME="NA-PACIFIC"
      else
         get_timezone 
         echo ""
      fi
   fi

   if [ "$WRITE_RESPONSE" = "true" ] ; then
	eval check_response_write II_TIMEZONE_NAME $II_TIMEZONE_NAME replace
   else 
   # set miscellaneous symbol
   eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_TIMEZONE_NAME $II_TIMEZONE_NAME
   eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_INSTALLATION $II_INSTALLATION
   eval II_ADMIN=$CLIENT_ADMIN ingsetenv II_TEMPORARY $II_TEMPORARY
   eval II_ADMIN=$CLIENT_ADMIN ingsetenv ING_EDIT $ING_EDIT 
   fi #end WRITE_RESPONSE mode
fi

# set gcn local_vnode resource

if [ "$WRITE_RESPONSE" = "false" ] ; then
iisetres ii.$CONFIG_HOST.gcn.local_vnode $HOSTNAME

echo "Configuring Net server listen addresses..."

# set default Net server listen addresses
iisetres ii.$CONFIG_HOST.gcc."*".async.port ""
iisetres ii.$CONFIG_HOST.gcc."*".decnet.port II_GCC${II_INSTALLATION}
iisetres ii.$CONFIG_HOST.gcc."*".iso_oslan.port OSLAN_${II_INSTALLATION}
iisetres ii.$CONFIG_HOST.gcc."*".iso_x25.port X25_${II_INSTALLATION}
iisetres ii.$CONFIG_HOST.gcc."*".sna_lu62.port "<none>"
iisetres ii.$CONFIG_HOST.gcc."*".sockets.port $II_INSTALLATION
iisetres ii.$CONFIG_HOST.gcc."*".spx.port $II_INSTALLATION
iisetres ii.$CONFIG_HOST.gcc."*".tcp_ip.port $II_INSTALLATION
iisetres ii.$CONFIG_HOST.gcc."*".tcp_wol.port $II_INSTALLATION

fi #end of WRITE_RESPONSE

[ "$HOSTNAME" != "$ACTUAL_HOSTNAME" ] &&
{
   #
   # since we are setting up an NFS-client remotely (from the server), we
   # can't allow the user to enter an installation password.
   #

if [ "$WRITE_RESPONSE" = "false" ] ; then
   iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
   remove_temp_resources
fi # end WRITE_RESPONSE mode

   cat << !

You must use the "netutil" program to authorize users of installation $ii_INSTALLATION
on host:

	$HOSTNAME

before they have access to local databases.  Refer to the Ingres Connectivity
Guide for information on using "netutil".

Note that "netutil" must be run on $HOSTNAME to authorize $HOSTNAME users.

Ingres Networking has been successfully set up in this installation.

You can now use the "ingstart" command to start your Ingres client.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!

if [ "$WRITE_RESPONSE" = "false" ] ; then
   if [ "$II_CONFIG_LOCAL" ] ; then
      cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
      cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
      mv -f $II_SYSTEM/ingres/files/config.nfs \
            $II_SYSTEM/ingres/files/config.dat
   fi
fi #end of WRITE_RESPONSE mode
   $BATCH || pause
   trap : 0
   clean_exit
} # setting NFS client remotely.

# now do installation password setup
if [ "$SERVER_HOST" ] && [ "$SERVER_HOST" = "$HOSTNAME" ] && \
   [ -z "$NFS_CLIENT" ]
then
   # this is a server
   cat << !

Users of other Ingres installations must be authorized to connect
to this server installation.  For a user to be authorized, correct
authorization information must be set up locally and on remote clients.
You can authorize remote users for access to this server using
installation passwords (in addition to Ingres Networking user
passwords supported in past releases).

Installation passwords offer the following advantages over user passwords:

+ Remote users do not need login accounts on the server host.

+ Installation passwords are independent of host login passwords. 

+ Installation passwords are not transmitted over the network in any
  form, thus providing greater security than user passwords.

+ User identity is always preserved.

If you need more information about Ingres Networking authorization,
please refer to the Ingres Connectivity Guide.

!

$NONNFS_CLIENT_SETUP   ||
{
  $BATCH || pause
   cat << !

You now have the option of creating an installation password for this
server.  If you choose not to set up an installation password on this
server, then you must use the "netutil" program (as described in the
Ingres Connectivity Guide) to authorize remote users for access
to this server.

Be aware that simply creating an installation password on this server
does not automatically authorize remote users for access.  To authorize
a remote user, a valid password must be entered into the Ingres
Networking authorization profile for that user on the client.  You can
authorize remote users in either of the following ways:

o Use "netutil" as described in the Ingres Connectivity Guide.

o Select the installation password authorization option (only valid if
  your network supports TCP/IP) during the setup procedure for Ingres
  Networking on the client.  Note: this option is not available when 
  client setup is performed remotely over NFS.

!
}
   if $NOTBATCH && prompt \
      "Do you want to create an installation password for this server?"
   then
      if [ "$WRITE_RESPONSE" = "false" ] ; then
      cat << ! 
y

Starting the Ingres name server for password creation... 
!
      # start the name server in order to run netutil
      iirun iigcn >/dev/null ||
      {
         cat << !

The name server failed to start.  See the Ingres error log:

	$II_SYSTEM/ingres/files/errlog.log

for a description of the error.  You must correct the problem and re-run
$SELF.

!
         exit 1
      }
      cat << ! 

Note that installation passwords must be unique in the first eight characters.

!
      # turn off local echo for password entry
      stty -echo
      NOT_DONE=true
      while $NOT_DONE ; do
         iiechonn "Enter installation password: "
         read PASSWORD junk
         echo ""
         iiechonn "Retype password: "
         read VERIFY_PASSWORD junk
         echo ""
         if [ "$PASSWORD" != "$VERIFY_PASSWORD" ] ; then
            cat << !

Password mismatch.  Please try again. 

!
         else
            NOT_DONE=false
         fi
      done
      stty echo

      echo "C G login $HOSTNAME * $PASSWORD" >/dev/null
      if netutil -file- << !
C G login $HOSTNAME * $PASSWORD
!
      then
         cat << !

Installation password created.  The name server has been shut down.
!
         iisetres ii.$CONFIG_HOST.setup.passwd.$RELEASE_ID on
      else
         cat << !
Unable to create installation password due to "netutil" failure.

!
         iisetres ii.$CONFIG_HOST.setup.passwd.$RELEASE_ID off 
      fi
      # stop the name server
      iinamu << ! >/dev/null
stop
y
q
!
      fi #end WRITE_RESPONSE mode
   else # batch
      cat << !
n
Installation password not configured
!
      iisetres ii.$CONFIG_HOST.setup.passwd.$RELEASE_ID off
   fi # end nobatch
   if [ "$WRITE_RESPONSE" = "false" ] ; then
      iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
      remove_temp_resources
      cat << !

Ingres Networking has been successfully set up in this installation.

You can now use the "ingstart" command to start your Ingres server.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!
      if [ "$II_CONFIG_LOCAL" ] ; then
         cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
         cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
         mv -f $II_SYSTEM/ingres/files/config.nfs \
               $II_SYSTEM/ingres/files/config.dat
      fi
   fi # end of WRITE_RESPONSE
   $BATCH || pause
   trap : 0
   clean_exit
fi # out of the loop

# if here, we are setting up a client of some sort
if $NFS_CLIENT ; then
   SERVER_II_INSTALLATION=`eval II_ADMIN=$II_SYSTEM/ingres/files \
      ingprenv II_INSTALLATION`
   SERVER_TCP_IP_PORT=`iigetres ii.$CONFIG_SERVER_HOST.gcc."*".tcp_ip.port`
   SERVER_PASSWD=`iigetres ii.$CONFIG_SERVER_HOST.setup.passwd.$RELEASE_ID`


   if [ "$SERVER_PASSWD" = "on" ] || [ "$SERVER_PASSWD" = "ON" ] ; then
      # installation password created on server
      cat << !

An installation password was created for the default server (installation
"$SERVER_II_INSTALLATION" on host "$SERVER_HOST") during the Ingres
Networking setup procedure on that host.

If your network supports the TCP/IP protocol and you know the installation
password which was created on the server, then you have the option of
authorizing yourself (the installation owner) or all "$HOSTNAME" users
for access to the default server.

!
      if $NOTBATCH && \
         prompt "Do you want to authorize any users at this time?" y
      then
         echo "" 
         if prompt "Do you want to authorize all users on \"$HOSTNAME\"?" y ; then
            # netutil authorization entry will be (G)lobal
            AUTH_TYPE=G
         else
            # netutil authorization entry will be (P)rivate
            AUTH_TYPE=P
            cat << !

This procedure will only authorize the installation owner ($ING_USER) to
access the server.
!
         fi
      else #batch
         if [ "$WRITE_RESPONSE" = "false" ] ; then
         iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
         remove_temp_resources
         fi
         cat << !

Ingres Networking has been successfully set up in this installation.
Refer to the Ingres Connectivity Guide for instructions on how to use
the "netutil" program to authorize local users for access to remote
Ingres servers.

You can now use the "ingstart" command to start your Ingres client.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!
         if [ "$WRITE_RESPONSE" = "false" ] ; then
         if [ "$II_CONFIG_LOCAL" ] ; then
            cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
            cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
            mv -f $II_SYSTEM/ingres/files/config.nfs \
                  $II_SYSTEM/ingres/files/config.dat
         fi
         fi # end WRITE_RESPONSE flag.
         $BATCH || pause
         trap : 0
         clean_exit
      fi
   else
      # no installation password created on server

      if [ "$WRITE_RESPONSE" = "false" ] ; then
      iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
      remove_temp_resources
      fi #end of WRITE_RESPONSE flag

      cat << !

Ingres Networking has been successfully set up for this installation.
Refer to the Ingres Connectivity Guide for instructions on how to use
the "netutil" program to authorize local users for access to remote
Ingres servers.

You can now use the "ingstart" command to start your Ingres client.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!
      if [ "$WRITE_RESPONSE" = "false" ] ; then
      if [ "$II_CONFIG_LOCAL" ] ; then
         cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
         cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
         mv -f $II_SYSTEM/ingres/files/config.nfs \
               $II_SYSTEM/ingres/files/config.dat
      fi
      fi #end of WRITE_RESPONSE flag 
      $BATCH || pause
      trap : 0
      clean_exit
   fi
else
   # non-NFS-client installation
   II_INSTALLATION=`ingprenv II_INSTALLATION`
   DEFAULT_SERVER_TCP_IP_PORT=`iigetres ii.$CONFIG_HOST.gcc."*".tcp_ip.port`

if [ "$WRITE_RESPONSE" = "false" ] ; then
   # get installation code of default server
   cat << ! 

You can now create a local authorization entry either for yourself
(the installation owner) or for all users on "$HOSTNAME".  A local
authorization will enable you to access an Ingres server
installation over TCP/IP.

To create an authorization you will need the following information:

o The name of the host on which the Ingres server resides.

o A valid Ingres Networking TCP/IP listen address for the server.
  (The default TCP/IP listen address is the value of II_INSTALLATION
  on the server). 

o A valid installation password for the server.

!
   if $NOTBATCH && \
      prompt "Do you want to create an authorization entry?" y
   then
      echo "" 
      if prompt "Do you want to authorize all users on \"$HOSTNAME\"?" y ; then
         # netutil authorization entry will be (G)lobal
         AUTH_TYPE=G
      else
         # netutil authorization entry will be (P)rivate
         AUTH_TYPE=P
         cat << !

This procedure will only authorize the installation owner ($ING_USER) to
access the server.
!
      fi

      # prompt for default server host, ping to verify
      NOT_DONE=true
      while $NOT_DONE ; do
         echo ""
         iiechonn "Enter the name of the server host machine: "  
         read SERVER_HOST junk
         # ping should probably go into iisysdep
         if $PINGCMD $SERVER_HOST $PINGARGS 1>/dev/null 2>/dev/null ; then
            NOT_DONE=false
         else
            cat << !

The host you have specified does not respond. 

!
            prompt "Do you want to enter another host?" y || \
               NOT_DONE=false 
         fi

         # make up different remote_vnode if same as local host 
         if [ "$SERVER_HOST" = "$HOSTNAME" ] ; then 
            SERVER_VNODE=${SERVER_HOST}_server
         else
            SERVER_VNODE=$SERVER_HOST
         fi
      done

      # set gcn remote_vnode resource
      iisetres ii.$CONFIG_HOST.gcn.remote_vnode $SERVER_VNODE

      # prompt for the TCP/IP listen address
      echo ""
      iiechonn "Please enter the server's TCP/IP listen address: "
      read SERVER_TCP_IP_PORT junk
   else  # else the followis is for batch mode 
        iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
        remove_temp_resources
      cat << !

Ingres Networking has been successfully set up for this installation.
Refer to the Ingres Connectivity Guide for instructions on how to use
the "netutil" program to authorize local users for access to remote
Ingres servers.

You can now use the "ingstart" command to start your Ingres client.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!
      if [ "$II_CONFIG_LOCAL" ] ; then
         cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
         cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
         mv -f $II_SYSTEM/ingres/files/config.nfs \
               $II_SYSTEM/ingres/files/config.dat
      fi
      $BATCH || pause
      trap : 0
      clean_exit
   fi #end not-batch
 fi #end of WRITE_RESPONSE mode
fi #end of non-NFS-clients 

#
# this part is the same for NFS and non-NFS-clients
# For read / write response mode we do none of this.
# use netutil etc to accomplish this task.
#
if [ "$WRITE_RESPONSE" = "false" ] ; then
cat << !

Starting the Ingres name server for password entry... 

!
# start the name server in order to run netutil
iirun iigcn ||
{
   cat << !
The name server failed to start.  See the Ingres error log:

	$II_SYSTEM/ingres/files/errlog.log

for a description of the error.  You must correct the problem and re-run
$SELF.

!
   exit 1
}

# prompt for password with local echo off
stty -echo
NOT_DONE=true
while $NOT_DONE ; do
   iiechonn "Enter the installation password created on the server: "
   read PASSWORD junk
   echo ""
   iiechonn "Retype password: "
   read VERIFY_PASSWORD junk
   echo ""
   if [ "$PASSWORD" != "$VERIFY_PASSWORD" ] ; then
      cat << !

Password mismatch.  Please try again. 

!
   else
      NOT_DONE=false
   fi
done

# run netutil to enter authorization information
stty echo
if netutil -file- << !
C G C $SERVER_VNODE $SERVER_HOST tcp_ip $SERVER_TCP_IP_PORT 
C $AUTH_TYPE login $SERVER_VNODE * $PASSWORD 
!
then
   cat << !

Remote authorization created.  The name server has been shut down.

!
   iisetres ii.$CONFIG_HOST.setup.passwd.$RELEASE_ID on
else
   cat << !
Unable to create installation password due to netutil failure. 

!
   iisetres ii.$CONFIG_HOST.setup.passwd.$RELEASE_ID off
fi

# run iinamu to stop the name server
iinamu << ! >/dev/null
stop
y
q
!
iisetres ii.$CONFIG_HOST.config.net.$RELEASE_ID complete
remove_temp_resources
cat << !
Ingres Networking has been successfully set up in this installation.

You can now use the "ingstart" command to start your Ingres client.
Refer to the Ingres Installation Guide for more information about
starting and using Ingres.

!
   if [ "$II_CONFIG_LOCAL" ] ; then
      cp -p $II_SYSTEM/ingres/files/config.dat $CLIENT_ADMIN/config.dat
      cp -p $CLIENT_ADMIN/config.dat $CLIENT_ADMIN/config.$CONFIG_HOST
      mv -f $II_SYSTEM/ingres/files/config.nfs \
            $II_SYSTEM/ingres/files/config.dat
   fi
fi #end WRITE_RESPONSE
   $BATCH || pause
trap : 0
clean_exit
}

eval do_setup $INSTLOG
trap : 0
exit 0
fi
