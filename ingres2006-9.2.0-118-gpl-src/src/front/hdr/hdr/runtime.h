/*
** RUNTIME.H  -  Runtime system for FORMS EQUEL
**
** HISTORY:
**		03-feb-1983	- Extracted from runtime.c (jen)
**		04-mar-1983 	- Added all structures for table fields (ncg)
**		16-jan-1984	- Added Query mode for table fields (ncg)
**		15-feb-1984	- Modified for the Equel rewrite.
**		10-may-1985	- Added DSMEM for table fields.
**		25-jul-1985	- Added function key support for 4.0. (dkh)
**		22-dec-1986	- Added support for new activates. (dkh)
**		18-feb-1987	- Changed COLDESC and TBROW for ADT's (drh)
**		20-feb-1987	- Added frserrno.h, fehdr.h, dbms.h and
**				  change MAXFRSNAME to equal FE_MAXNAME (drh)
**		26-feb-1987	- Added MAXIQSET definition (drh)
**		14-apr-1987	- Removed fehdr.h (daver)
**		09/01/87 (dkh)  - Removed include of frserrno.h.
**		09/05/87 (dkh)  - Removed reference to IIerrdisp.
**		09/05/87 (dkh)  - Added change bit for datasets.
**		09/16/87 (dkh)  - Integrated table field change bit.
**		11-nov-88 (bruceb)
**			Added field to RUNFRM struct to contain value
**			generated by equel for activate timeout (or 0 if
**			none defined.)
**		06-feb-89 (bruceb)
**			Changed value of MAXIQSET from 62 to 255 (value
**			of MAX_FMTSTR) to handle set/inquire of formats.
**		07/22/89 (dkh) - Fixed bug 6765.
**		09/23/89 (dkh) - Porting changes integration.
**		11/30/89 (Mike S) - Remove references to LIBQ data which is 
**				    now in a structure.
**		03/19/91 (dkh) - Added support for alerter event in FRS.
**	   09-apr-1996 (chech02)
**	      Windows 3.1 port changes - add more function prototypes.
**	04/15/97 (cohmi01)
**	    Keep track of ordinal position in dataset. (b81574)
**
** NOTE:
**	Table Fields were originally written for the front-end catalogs, by
** Joe.  As the catalogs evolved, and users requested the table field tool as 
** a forms utility, Joe's old directory TBACC was replaced, and routines built
** to support Equel calls to the form system's table fields.  The already 
** existing modules in the frame driver were enhanced and modified to be used
** more like regular fields in a form, together with the addition of new 
** modules.
**
** Copyright (c) 2004 Ingres Corporation
*/

# include	 <ctrl.h> 
# include	 <eqrun.h> 
# include	 <frsctblk.h>

/*
**  Fix for BUG 6962. (dkh)
**  MAXFRSPARAM increased from 2048 to 3072.
*/
# define	MAXFRSPARAM	3072	   /* max length of param target list */
# define	MAXFRSNAME	FE_MAXNAME /* max length of frs object name */
# define	MAXIQSET	255	   /* max length of char-type frs
					      set or inquire value */

/*
**  Flags for rfrmflags member of RUNFRM struct.
*/
# define	RTRESMENU	01	/* resume menu */
# define	RTACTNORUN	02	/* activated but not runned */
/*
**  Flag indicating that IIrunform() needs to handle a pending
**  activation.
*/
# define	RTACT_PENDING	04

/* column descriptor -- for each distinct column */
typedef struct coldes 
{
	char		*c_name;	/* name of column		*/
	i4		c_offset;	/* offset into data of row ptr	*/
	i4		c_qryoffset;	/* offset for query operator 	*/
	i4		c_chgoffset;	/* offset for change bit */
	i2		c_hide;		/* set if hidden column		*/
	DB_DATA_VALUE	c_dbv;		/* data descriptor		*/
	struct coldes	*c_nxt;		/* next column descriptor	*/
} COLDESC;

/* row descriptor -- one per table */
typedef struct rowdes 
{
	i4 		r_dissize;	/* size of displayed row record	*/
	i4		r_realsize;	/* includes hidden information	*/
	i4		r_ncols;	/* number of displayed columns 	*/
	COLDESC		*r_coldesc;	/* pointers to displayed and	*/
	COLDESC		*r_hidecd;	/*   hidden column descriptors	*/
	i2		r_memtag;	/* Tag for COLDESC allocation */
} ROWDESC;

/* actual data and list elements -- to access data use above descriptors */
typedef struct rowptr 
{
	struct rowptr	*prevr;		/* links into list of rows	*/
	struct rowptr	*nxtr;
	i2		rp_state;	/* state of row record--below	*/
	PTR		rp_data;	/* actual data for each row	*/
} TBROW;

/* states for rows in data set */
# define	stNEWEMPT	-1	/* space appended at runtime	*/
# define	stUNDEF		0	/* space just allocated		*/
# define	stNEW		1	/* appended and filled by user	*/
# define	stUNCHANGED	2	/* added through Equel program	*/
# define	stCHANGE	3	/* changed by Equel or user	*/
# define	stDELETE	4	/* added by Equel,later deleted	*/

/* data set memory manager - efficiently uses free lists */
typedef struct {		
	i4	dm_size;	/* Size of record - may not be r_realsize */
	char	*dm_work;	/* Exclusively for IIretrow work space */
	TBROW	*dm_freelist;	/* Free list for all records */
	i2	dm_memtag;	/* Tag for dataset allocation */
} DSMEM;


/* data set when table is initialized */
typedef struct dsrows 
{
	TBROW		*top;		/* top of data set		*/
	TBROW		*bot;		/* bottom of data set		*/
	TBROW		*distop;	/* top of display		*/
	i4		distopix;	/* ordinal position of distop	*/
	TBROW		*disbot;	/* bottom of display		*/
	TBROW		*crow;		/* current row in data set	*/
	TBROW		*dellist;	/* list of deleted records	*/
	ROWDESC		*ds_rowdesc;	/* descriptor of the row struct	*/
	DSMEM		*ds_mem;	/* data set memory manager */
	i4		ds_records;	/* number of existing records	*/
} DATSET;
	
/* general table and its info */
typedef struct tblstr 
{
	char		*tb_name;	/* name of table field  	*/
	TBLFLD		*tb_fld;	/* parent table field in frame 	*/
	DATSET		*dataset;	/* structure of data set recs	*/
	i4		tb_display;	/* number of rows now displayed	*/
	i4		tb_numrows;	/* max number of rows in field	*/
	i4		tb_rnum;	/* current row number		*/
	i4		tb_state;	/* state of table -- see below	*/
	i4		tb_mode;	/* mode of display		*/
	i4		scrintrp[2];	/* interrupt values for UP/DOWN	*/
	struct tblstr	*tb_nxttb;	/* next table in run frame list	*/
} TBSTRUCT;

/* table states */
# define	tbUNDEF		0	/* table before even used	*/
# define	tbINIT		1	/* initialized with data set	*/
# define	tbDISPLAY	2	/* regular I/O command		*/
# define	tbLOAD		3	/* loading data set		*/
# define	tbUNLOAD	4	/* unloading data set		*/
# define	tbINSERT	5	/* insert IN record in data set	*/
# define	tbSCINTRP	6	/* attempt to cursor-scroll 	*/
# define	tbUNLDPUT	7	/* putrow within unloadtable	*/

/* # define TBLNONSEQ			   non-sequential table fields	*/

typedef struct frs_data		/* forms runtime data constants */
{
	char		*fdrunfld;		/* current field name */
	i4		*fdrunno;		/* current field num */
	i4		*fdrunlen;		/* length of field */
	i4		*fdruntype;		/* type of field */
	i4		*fdrunchg;		/* change in frame */
	char		*fdrunfmt;		/* format string of field */
	char		*fdrunval;		/* validation str of field */
	i2		*fdtbtbl;		/* current field is table */
	i4		*fdtbrow;		/* current row num */
	i4		*fdtbrowmax;		/* max rows in table */
	i4		*fdtblastrow;		/* num of last displayed row */
	i4		*fdtbcolmax;		/* max displayed columns */
	char		*fdtbcolumn;		/* current column name */
	i4		*fdrunerr;		/* run time err encountered */
} FRSDATA;

/* runtime frame structure */
typedef struct runstr
{
	char		*fdfrmnm;
	struct runstr	*fdlisnxt;
	struct runstr	*fdrunnxt;
	struct frmstr	*fdrunfrm;
	struct menuType	*fdrunmu;
	struct comms	*fdruncm;
	struct tblstr	*fdruntb;		/* frame's table fields */
	i4		fdmunum;
	i4		fdrunmd;
	i4		fdruncur;
	FRSDATA		*fdfrs;
	struct frskey	*fdfrskey;
	i4		rfrmflags;
	FRS_EVCB	*fdevcb;
	i4		saveflags;	/* save area for frmflags for popups */
	i4		begx;		/* save area for frposx for popups */
	i4		begy;		/* save area for frposy for popups */
	i4		maxx;		/* future use */
	i4		maxy;		/* future use */
	i4		tmout_val;	/* activation value on timeout */
	i4		alev_intr;	/* interrupt value for alerter event */
	i4		intr_kybdev;	/* pending intr val from kybd action */
	i4		ret_kybdev;	/* iirunform ret val from kybd action */
} RUNFRM;

typedef struct comms
{
	i2		c_comm;
	i2		c_val;
} COMMS;

typedef struct frskey
{
	char		*frs_exp;	/* explanation */
	i2		frs_int;	/* interrupt value */
	i1		frs_val;	/* validate 3 state boolean */
	i1		frs_act;	/* activate 3 state boolean */
} FRSKY;

/*
**  Constants for indicating mode in display statement.
*/
# define	fdrtNOP		0
# define	fdrtUPD		1
# define	fdrtINS		2
# define	fdrtRD		3
# define	fdrtNAMES	4
# define	fdrtQRY		5

/* Constants required by the SET/INQUIRE FRS data routines */

					/* regular field FRS flags 	*/
# define	frsFLDNM	1			/* _field 	*/
# define	frsFLDNO	2			/* _fieldno 	*/
# define	frsFLDLEN	3			/* _length	*/
# define	frsFLDTYPE	4			/* _type	*/
# define	frsFLDFMT	5			/* _format	*/
# define	frsFLDVAL	6			/* _valid	*/
# define	frsFLDTBL	7			/*   is table	*/
# define	frsFLDMODE	8			/*   mode	*/

					/* frame FRS flag		*/
# define	frsFRMCHG	11			/* _change	*/

					/* table field FRS flags	*/
# define	frsTABLE	21			/* _table	*/
# define	frsROWNO	22			/* _rowno	*/
# define	frsROWMAX	23			/* _maxrow	*/
# define	frsLASTROW	24			/* _lastrow	*/
# define	frsCOLMAX	25			/* _maxcol	*/
# define	frsCOLUMN	26			/* _column	*/
# define	frsDATAROWS	27			/* datarows	*/

					/* runtime detail flags		*/
# define	frsRUNERR	31			/* _error	*/

FUNC_EXTERN	VOID		II_fend();

typedef	struct	rtattlist
{
	char	*ra_name;
	i4	ra_set;
	i4	ra_type;
	i4	ra_arg;
	i4	(*ra_proc)();
}	RTATTLIST;

typedef	struct	rtobjlist
{
	char		*ro_name;
	i4		ro_ptr;
	RTATTLIST	*ro_att;
}	RTOBJLIST;

#ifdef WIN16
/* function prototypes */
FUNC_EXTERN    i4  IIFRfind_row(PTR,PTR, bool noscroll); 
FUNC_EXTERN	char *IIiqobjtype(long objtype);
FUNC_EXTERN	i4   IIiqset(i4 objtype,nat row,char *formname, ...);
FUNC_EXTERN	int   IIsimobj(i4 pobj,nat attr,char *objname,nat row,
                 i4  *RTcode,nat **arg1 ,nat **arg2 );
FUNC_EXTERN	i4   IIstfsio(i4 attr,char *name,nat row,i2 *nullind,
                 i4  isvar,nat type,nat length,PTR tdata);
FUNC_EXTERN	i4   IIstfrs(i4 attr,char *name,nat row,nat isvar,nat type,
                 i4  length,char *tdata);
FUNC_EXTERN	i4   IIiqfsio(i2 *nullind,nat isvar,nat type,nat length,
                 PTR data,nat attr,char *name,nat row);
FUNC_EXTERN	i4   IIsicpfcnv(char *str,nat *val);
FUNC_EXTERN	struct runstr *IIget_stkf(i4 argcnt,nat minargs,char *object,char **nml );
FUNC_EXTERN	int   IIset30mode(char *mode);
FUNC_EXTERN	i4   IIiqfrs(i4 isvar,nat type,nat length,PTR data,nat attr,
                 char *name,nat row);
FUNC_EXTERN	i4   IIgetrtcode(i4 fsitype);
FUNC_EXTERN	void loc_error(PTR,u_i4,nat,PTR);
FUNC_EXTERN	bool IIFRbserror(struct popup_info *p,nat row,nat col,char *what);
FUNC_EXTERN	void II_fend(bool normal);
FUNC_EXTERN	i4 IIactfld(char *strvar,nat val);
FUNC_EXTERN	i4 IIFRafActFld(char *strvar,nat entry_act,nat val);
FUNC_EXTERN	int IIsetferr(unsigned long err);
FUNC_EXTERN	int IIfrskact(i4 frsknum,char *exp,nat val,nat intrval);
FUNC_EXTERN	void IIFRInternal(i4 dummy);
FUNC_EXTERN   void IIFRsqDescribe(i4 lang,nat is_form,char *form_name,
            char *table_name,char *mode,PTR sqd); 
FUNC_EXTERN   void IIFRsqExecute(i4 lang,nat is_form,nat is_input,PTR sqd); 
FUNC_EXTERN	struct frs_data *IIfsinit(u_i4 tag);
FUNC_EXTERN	STATUS IIgetquery(char *form,char *field,char *column,
              char *tblname,nat dml_level,char *attr,char *prefix,
              STATUS (*func)(void),char *data);
FUNC_EXTERN	void IIFRgotofld(i4 dir);
FUNC_EXTERN	void IIFRgpsetio(i4 pid,i2 *nullind,bool isvar,
                 i4  type,nat len,PTR val);
FUNC_EXTERN	void IIFRgpcontrol(i4 state,nat alt);
FUNC_EXTERN	i4  IIgetoper(i4 set);
FUNC_EXTERN	i4  IIputoper(i4 set);
FUNC_EXTERN	int IIactmenu(char *strvar,char *exp,nat val,nat intrp);
FUNC_EXTERN	int IInactmenu(char *strvar,char *exp,nat val,nat act,nat intrp);
FUNC_EXTERN	i4 IIishelp(i4 val);
FUNC_EXTERN	i4 IIrunmu(i4 dispflg);
FUNC_EXTERN	i4 IIaddact(i2 acttag,struct fld_save **flist ,nat actcode,
                 int enactcode,struct fldhdrstr *fldhdr);
FUNC_EXTERN	void IIFRmcMuChg(struct runstr *rfrm,char *menu_name,nat to_state);
FUNC_EXTERN	i4  IIRTinqmu(struct runstr *rfrm,char *mu_name,
                  i4  rtcode,nat *data);
FUNC_EXTERN	i4  IIRTsetmu(struct runstr *rfrm,char *mu_name,
                 i4   rtcode,nat *data);

/* iiprompt.c */
FUNC_EXTERN	void IIprmptio(i4,PTR,PTR,nat,nat,nat,PTR);
FUNC_EXTERN	int IIprmthdlr(PTR,PTR,nat);

/* iiqbfraw.c */
FUNC_EXTERN	int IIqbfgetraw(PTR,PTR,nat,PTR);
FUNC_EXTERN	int IIqbfputraw(PTR,PTR,nat,PTR);
FUNC_EXTERN	int IIqbfraw(PTR,PTR,nat,PTR,nat);
/* iiqbfutl.c */
FUNC_EXTERN	STATUS IIinitsp(PTR,nat,nat);
FUNC_EXTERN	bool   IIrvalid(PTR,PTR,PTR,nat);
FUNC_EXTERN	STATUS IIrngget(PTR,PTR,PTR,PTR,nat,PTR,PTR,PTR);

/* iiqryfld.c */
FUNC_EXTERN	STATUS IIqryfield(PTR,PTR,PTR,nat,PTR,PTR,PTR);

/* iiqryop.c */
FUNC_EXTERN	int IIgetqry(i4,nat,nat,PTR,PTR);

/* iiretfld.c */
FUNC_EXTERN	i4  IIretfield(i4,nat,nat,PTR,PTR);
FUNC_EXTERN	i4  IIgetfldio(PTR,nat,nat,nat,PTR,PTR);

/* iirowset.c */
FUNC_EXTERN	STATUS IIrowset(PTR,PTR,nat,PTR);

/* iirunfrm.c */
FUNC_EXTERN	i4 IIFRaeAlerterEvent(i4);


/* iisetfld.c */
FUNC_EXTERN	i4  IIsetfield(PTR,nat,nat,nat,PTR);
FUNC_EXTERN	i4  IIputfldio(PTR,PTR,nat,nat,nat,PTR);

/* iisetinq.c */
FUNC_EXTERN	i4  IIfssetio(PTR,PTR,nat,nat,nat,PTR);
FUNC_EXTERN	i4  IIfrsset(PTR,nat,nat,nat,PTR);
FUNC_EXTERN	i4  IIfsinqio(PTR,nat,nat,nat,PTR,PTR);
FUNC_EXTERN	i4  IIfrsinq(i4,nat,nat,PTR,PTR);

/* iitest.c */
FUNC_EXTERN	int  IItestfrs(i4);

/* iitoact.c */
FUNC_EXTERN	i4  IIFRtoact(i4,nat);

/* rtgtmode.c */
FUNC_EXTERN	int RTsetmode(i4,PTR,PTR);

/* rtsicol.c */
FUNC_EXTERN	i4  RTinqcol(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetcol(PTR,PTR,nat,PTR);

/* rtsifld.c */
FUNC_EXTERN	     RTstspec(i4);
FUNC_EXTERN	i4   RTselcolor(i4);
FUNC_EXTERN	i4   RTfindcolor(i4);
FUNC_EXTERN	i4  RTinqfld(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetfld(PTR,PTR,nat,PTR);

/* rtsifrm.c */
FUNC_EXTERN	i4  RTinqfrm(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetfrm(PTR,PTR,nat,PTR);

/* rtsirc.c */
FUNC_EXTERN	i4  RTrcdecode(i4,PTR,nat);
FUNC_EXTERN	i4  RTinqrow(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetrow(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTinqrc(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetrc(PTR,PTR,nat,PTR);
FUNC_EXTERN	void IIFRsaSetAttrio(i4,PTR,PTR,nat,nat,nat,nat,PTR);

/* rtsisys.c */
FUNC_EXTERN	i4  RTivalsys(i4);
FUNC_EXTERN	void RTsvalsys(i4,nat);
FUNC_EXTERN	i4  RTvaldecode(i4,nat,nat);
FUNC_EXTERN	i4  RTchkcmd(i4);
FUNC_EXTERN	i4  RTimap(i4,PTR);
FUNC_EXTERN	i4  RTilabel(i4,PTR);
FUNC_EXTERN	i4  RTsmap(i4,nat);
FUNC_EXTERN	i4  RTslabel(i4,PTR);
FUNC_EXTERN	void IIFRstvSetTmoutVal(i4);
FUNC_EXTERN	i4  RTinqsys(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTsetsys(PTR,PTR,nat,nat);

/* rtsitbl.c */
FUNC_EXTERN	i4  RTsettbl(PTR,PTR,nat,PTR);
FUNC_EXTERN	i4  RTinqtbl(PTR,PTR,nat,PTR);

/* iicolbrk.c */
FUNC_EXTERN	i4  IIactclm(PTR,PTR,nat);
FUNC_EXTERN	i4  IITBcaClmAct(PTR,PTR,nat,nat);

/* iiderive.c */
FUNC_EXTERN	struct _DB_DATA_VALUE *IITBgidGetIDBV(PTR,PTR,nat);
FUNC_EXTERN	i4   *IITBgfGetFlags(PTR,PTR,nat);

/* iidsprow.c */
FUNC_EXTERN	 IIdisprow(PTR,nat,PTR);

/* iiretrow.c */
FUNC_EXTERN	 IIretrow(PTR,nat,PTR);

/* iiscrbrk.c */
FUNC_EXTERN	 i4  IIactscrl(PTR,nat,nat);

/* iiscrscn.c */
FUNC_EXTERN	     IIscr_scan(PTR,nat);

/* iiscrtb.c */
FUNC_EXTERN	     IIscr_tb(PTR,i2,nat);

/* iisetmde.c */
FUNC_EXTERN	void IITBdsmDynSetMode(PTR,nat,PTR);

/* iitbact.c */
FUNC_EXTERN	i4  IItbact(PTR,PTR,nat);

/* iitbdelr.c */
FUNC_EXTERN	i4  IItdelrow(i4);

/* iitbscrl.c */
FUNC_EXTERN	i4  IItscroll(i4,nat);

/* iitbstio.c */
FUNC_EXTERN	i4    IItbsetio(i4,PTR,PTR,nat);
FUNC_EXTERN	       IITBscb(PTR,PTR,PTR,nat,nat);
FUNC_EXTERN	void   IITBscaSetCellAttr(PTR,PTR,PTR,nat,i4,nat,nat);
FUNC_EXTERN	STATUS IITBicaInqCellAttr(PTR,PTR,PTR,nat,PTR);
FUNC_EXTERN	void IItsetattr(PTR,i4,nat);

/* iitbunld.c */
FUNC_EXTERN	STATUS IITBasAggSetup(PTR,PTR,nat);

/* iitqycol.c */
FUNC_EXTERN	STATUS IItqrycol(PTR,PTR,PTR,nat,PTR,PTR,PTR);

/* iitrtcol.c */
FUNC_EXTERN	i4  IItcolret(i4,nat,nat,PTR,PTR);
FUNC_EXTERN	i4  IItcogetio(PTR,nat,nat,nat,PTR,PTR);

/* iitstcol.c */
FUNC_EXTERN	i4  IItcolset(PTR,nat,nat,nat,PTR);
FUNC_EXTERN	i4  IItcoputio(PTR,PTR,nat,nat,nat,PTR);

/* iivalcol.c */
FUNC_EXTERN	i4  IItvalval(i4);

/* libq */
FUNC_EXTERN	char *IIstrconv(i4 ,PTR,PTR,nat);
#endif /* WIN16 */
