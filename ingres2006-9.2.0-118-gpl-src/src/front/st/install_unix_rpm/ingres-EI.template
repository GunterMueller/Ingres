Summary: %rpm_product%
Name: %rpm_basename%%rpm_specname%
Version: %rpm_version%
Release: %rpm_release%
Copyright: Commercial
Group: Applications/Databases
Source: none
Patch: none
Vendor: %rpm_vendor%
URL: %rpm_url%
BuildRoot: %rpm_buildroot%
Prefix: %rpm_emb_prefix%
PreReq: ca-cs-utils >= 3.1.04085-0000
PreReq: ca-ingres-CATOSL >= %rpm_version%-%rpm_release%

AutoReq: 0
%define _unpackaged_files_terminate_build 0 
%define _missing_doc_files_terminate_build 0

%description 
%product_name% Base Package for CA Common Services

The %product_name% Base Package combines the %product_name% Intelligent DBMS with the following %product_name% tools:

Terminal Monitors (sql/isql/iquel) - Simple SQL/Quel interfaces to the %product_name% Intelligent DBMS.

Query-By-Forms (qbf) - An interactive, visually oriented, forms-based system for rapidly creating, querying, and manipulating database tables.

Report-By-Forms (rbf) - An interactive, visually oriented, forms-based system for rapidly creating and producing simple database reports.

Report-Writer (rw) - A high-level programming system for creating and producing complex database reports without using a 3GL.

Visual-Forms-Editor (vifred) - A visually oriented tool for creating and editing %product_name% forms.

%product_name%/Menu (ingmenu) - A simple forms-based front-end to the %product_name% Query and Reporting Tools and Database Administration Tools.

%prep

%pre
# RPM install option for PIF
# PIF_RPM_UPDATE_OPTION= --nodeps --replacefiles --replacepkgs
#set environment from RPM info
[ -z "$RPM_INSTALL_PREFIX" ] && RPM_INSTALL_PREFIX=%prefix
II_SYSTEM=$RPM_INSTALL_PREFIX
PATH=$II_SYSTEM/ingres/bin:$II_SYSTEM/ingres/utility:$PATH
LD_LIBRARY_PATH=/lib:/usr/lib:$II_SYSTEM/ingres/lib
export II_SYSTEM PATH LD_LIBRARY_PATH
unset BASH_ENV

export user_created=false
export group_created=false

fail_cleanup()
{
# Remove anything we have created if the pre-install failed
    $user_created && userdel -r $II_USERID
    $group_created && groupdel $II_GROUPID
}

iiread_response()
{
   value=""
   [ "$2" ] && [ -f "$2" ] &&
   {
      cut -d= -f1 $2 | grep $1 >/dev/null &&
      {
         value=`grep $1 $2 | cut -d= -f2`
      }
   }
   echo $value
}

#%pre starts here
rc=0 #initialize return code
#check to see if instance is running and abort if it is
[ -x $II_SYSTEM/ingres/utility/csreport ] && csreport >> /dev/null
if [ $? = 0 ]
then
    rc=1
    echo "The %product_brandname% %product_version%/%product_release% installation under $II_SYSTEM is running"
    echo "Aborting installation..."
    exit $rc
fi

trap fail_cleanup 1

# Abort if response file is set but invalid
[ "$II_RESPONSE_FILE" ] && [ ! -f "$II_RESPONSE_FILE" ] && {
rc=2
cat << !
Cannot locate response file.

	II_RESPONSE_FILE=$II_RESPONSE_FILE
!
exit $rc
}

# Mesg cmds.

ECHO=echo
CAT=cat

#Silent install?
[ -r "$II_RESPONSE_FILE" ] && \
	silent=`iiread_response SILENT_INSTALL $II_RESPONSE_FILE`
[ "$silent" ] &&
{
    ECHO=true
    CAT=true
}

export ECHO CAT
#Check for install userid, groupid; default to ingres
iiuser=`iiread_response II_USERID $II_RESPONSE_FILE`
II_USERID=${iiuser:-ingres}
iigroup=`iiread_response II_GROUPID $II_RESPONSE_FILE`
II_GROUPID=${iigroup:-ingres}

# Check for Ingres install group/user and create it if it's not present
findgroup=`grep ^$II_GROUPID: /etc/group | awk -F: '{print $1}'`

if [ "$findgroup" != "$II_GROUPID" ] ; then

    /usr/sbin/groupadd $II_GROUPID
    # Failed?
    [ $? != 0 ] && {
    $ECHO "Warning: Failed to create group '$II_GROUPID'"
    }
    export group_created=true
fi

finduser=`grep ^$II_USERID: /etc/passwd |awk -F: '{print $1}'`

# Check for NIS users
[ -z "$finduser" ] && ( which ypcat >& /dev/null ) && \
    finduser=`ypcat passwd.byuser 2>&1 | grep ^$II_USERID:`
	
if [ "$finduser" != "$II_USERID" ] ; then

    /usr/sbin/useradd -g $II_GROUPID -c '%product_brandname% Super User' -m $II_USERID
    # Failed?
    [ $? != 0 ] && {
    rc=3
    echo "Failed to create user '$II_USERID'"
    exit $rc
    }

# Using SMB authenication?
    [ "`grep ^'auth required' /etc/pam.d/login | grep pam_smb_auth`" ] &&
    {
	$CAT << EOF
Your system appears to be using SMB authentication. Please run:

	 smbpasswd -a $II_USERID

to enable login.
EOF
    }

    $CAT << EOF
System user '$II_USERID' has been created, please set password to enable login.

EOF
    export user_created=true

fi

[ "$II_RESPONSE_FILE" ] && {

# Check response file is readable by specified installation owner.
# If not abort the install before it starts.
    if su -c "[ ! -r \"$II_RESPONSE_FILE\" ]" $II_USERID ; then
	rc=4
        cat << !
Response file is not readable by user $II_USERID

        II_RESPONSE_FILE=$II_RESPONSE_FILE

If user $II_USERID does not exists, the response file should be
globally readable.
!
        exit $rc
    fi
}

exit $rc

%install

%post

#Set environment
. /etc/profile.CA
[ -z "$RPM_INSTALL_PREFIX" ] && RPM_INSTALL_PREFIX=%prefix
II_SYSTEM=$RPM_INSTALL_PREFIX
PATH=$II_SYSTEM/ingres/bin:$II_SYSTEM/ingres/utility:$PATH
LD_LIBRARY_PATH=/lib:/usr/lib:$II_SYSTEM/ingres/lib
II_EMBED_INSTALL=TRUE
export II_SYSTEM PATH LD_LIBRARY_PATH II_EMBED_INSTALL
unset BASH_ENV

rc=0 #initialize return code

# Mesg cmds.

ECHO=echo
CAT=cat

#Silent install?
[ -r "$II_RESPONSE_FILE" ] && \
	silent=`iiread_response SILENT_INSTALL $II_RESPONSE_FILE`
[ "$silent" ] &&
{
    ECHO=true
    CAT=true
}
export ECHO CAT

parse_response()
{

# Read response file and set environment variables accordingly
    [ "$II_RESPONSE_FILE" ] && [ ! -f "$II_RESPONSE_FILE" ] && {
    rc=1
    cat << !
Cannot locate response file.

	II_RESPONSE_FILE=$II_RESPONSE_FILE
!
    exit $rc
    }

    for var in `cut -d= -f1 $II_RESPONSE_FILE`
    do
	export ${var}=`iiread_response ${var} $II_RESPONSE_FILE`
    done
}

check_env()
{
    [ "$II_RESPONSE_FILE" ] && parse_response
    # Use response file if one if provided
    IISUFLAG=-batch
    [ "$II_RESPONSE_FILE" ] && IISUFLAG="$IISUFLAG -exresponse $II_RESPONSE_FILE"
    export II_SUFLAG

    #Check for install userid, groupid; default to ingres
    II_USERID=${II_USERID:-ingres}
    II_GROUPID=${II_GROUPID:-ingres}

    #Check for user defined installation ID otherwise default to EI
    [ -z "$II_INSTALLATION" ] && II_INSTALLATION=`ingprenv II_INSTALLATION`
    [ -z "$II_INSTALLATION" ] && II_INSTALLATION=EI

    ingsetenv II_INSTALLATION $II_INSTALLATION
    $CAT << !
II_INSTALLATION configured as $II_INSTALLATION.
!

}

do_setup()
{
    # correct dir ownership
    chown $II_USERID:$II_GROUPID ${II_SYSTEM}/ingres/.
    for dir in bin demo files ice install lib sig utility vdba
    do
	[ -d "${II_SYSTEM}/ingres/${dir}/." ] && \
	    chown -R $II_USERID:$II_GROUPID ${II_SYSTEM}/ingres/${dir}/.
    done

    # and version.rel
    chown $II_USERID:$II_GROUPID ${II_SYSTEM}/ingres/version.rel


    # If ingvalidpw exists then it needs to be owned by root
    # and have SUID set.
    [ -x $II_SYSTEM/ingres/bin/ingvalidpw ] && {
	chown root $II_SYSTEM/ingres/bin/ingvalidpw
	chmod 4755 $II_SYSTEM/ingres/bin/ingvalidpw
    }

    # Create config.dat and set installation owner and group
    touch $II_SYSTEM/ingres/files/config.dat
    CONFIG_HOST=`iipmhost`
    iisetres "ii.${CONFIG_HOST}.setup.owner.user" $II_USERID
    iisetres "ii.${CONFIG_HOST}.setup.owner.group" $II_GROUPID
    iisetres "ii.${CONFIG_HOST}.setup.embed_installation" ON

    # Run setup
    su -m -c "iisutm $IISUFLAG || ( echo 'Setup of %product_name% Base Package failed.' && echo 'See $II_SYSTEM/ingres/files/install.log for more info.' )" $II_USERID || rc=2

eval homedir="~"$II_USERID
[ -d "$homedir" ] && [ -w "$homedir" ] || homedir=$CASHCOMP

cat << ! > $homedir/.ing${II_INSTALLATION}bash
# %product_brandname% environment for $II_INSTALLATION installation
# Generated at installation time

export II_SYSTEM=$II_SYSTEM
export PATH=\$II_SYSTEM/ingres/bin:\$II_SYSTEM/ingres/utility:\$PATH
if [ "\$LD_LIBRARY_PATH" ] ; then
    LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/usr/local/lib:\$II_SYSTEM/ingres/lib
else
    LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:\$II_SYSTEM/ingres/lib
fi
export LD_LIBRARY_PATH
export TERM_INGRES=vt100fx
!

    cat << ! > $homedir/.ing${II_INSTALLATION}tcsh
# %product_brandname% environment for $II_INSTALLATION installation
# Generated at installation time

setenv II_SYSTEM $II_SYSTEM
set path=(\$II_SYSTEM/ingres/{bin,utility} \$path)
if ( \$?LD_LIBRARY_PATH ) then
    setenv LD_LIBRARY_PATH \${LD_LIBRARY_PATH}:\$II_SYSTEM/ingres/lib
else
    setenv LD_LIBRARY_PATH /lib:/usr/lib:\$II_SYSTEM/ingres/lib
endif
setenv TERM_INGRES vt100fx
!

    chown $II_USERID:$II_GROUPID $homedir/.ing${II_INSTALLATION}*sh

# If env scripts are written to home directory, create link to them in $CASHCOMP
    
    [ "$homedir" != "$CASHCOMP" ] && \
    {
	rm -f $CASHCOMP/.ing${II_INSTALLATION}tcsh \
			$CASHCOMP/.ing${II_INSTALLATION}bash
	ln -s $homedir/.ing${II_INSTALLATION}tcsh \
		$CASHCOMP/.ing${II_INSTALLATION}tcsh
	ln -s $homedir/.ing${II_INSTALLATION}bash \
		$CASHCOMP/.ing${II_INSTALLATION}bash
    }


# Install startup scripts under /etc/rc.d

[ -x $II_SYSTEM/ingres/utility/mkrc ] && \
[ ! "$START_ON_BOOT" = "NO" ] && {
    /sbin/chkconfig --del ingres${II_INSTALLATION} >& /dev/null 
    mkrc && mkrc -i

    }

   return $rc
}

# Do any setup needed for CA common services.
do_cs_setup()
{
    #If we're installing under $CASHCOMP then we don't need a link
    [ "$CASHCOMP" = "$RPM_INSTALL_PREFIX" ] && return 0

    # Create link to CASHCOMP
    ln -s $II_SYSTEM/ingres $CASHCOMP/ingres

}


check_env
do_setup
do_cs_setup

exit $rc

%preun
#Setup environement
. /etc/profile.CA
[ -z "$RPM_INSTALL_PREFIX" ] && RPM_INSTALL_PREFIX=%prefix
II_SYSTEM=$RPM_INSTALL_PREFIX
PATH=$II_SYSTEM/ingres/bin:$II_SYSTEM/ingres/utility:$PATH
LD_LIBRARY_PATH=/lib:/usr/lib:$II_SYSTEM/ingres/lib
export II_SYSTEM PATH LD_LIBRARY_PATH
unset BASH_ENV
rc=0 # initialize return code
# Mesg cmds.

ECHO=echo
CAT=cat

#Silent install?
[ -x $II_SYSTEM/ingres/utility/iiread_response ] && \
	[ -r "$II_RESPONSE_FILE" ] &&
{
    silent=`iiread_response SILENT_INSTALL $II_RESPONSE_FILE`
    [ "$silent" ] &&
    {
	ECHO=true
	CAT=true
    }
    export ECHO CAT
}

#Check for install userid, groupid
CONFIG_HOST=`iipmhost`
if [ -x $II_SYSTEM/ingres/utility/iipmhost -a \
     -x $II_SYSTEM/ingres/utility/iigetres ] ; then
    CONFIG_HOST=`iipmhost`
    [ "$CONFIG_HOST" ] && \
    {   
        II_USERID=`iigetres ii.${CONFIG_HOST}.setup.owner.user`
        II_GROUPID=`iigetres ii.${CONFIG_HOST}.setup.owner.group`
        export II_USERID II_GROUPID
    }
fi

. iisysdep
inst_id=`ingprenv II_INSTALLATION`
rcfile=$ETCRCFILES/ingres${inst_id}
inst_log="2>&1 | cat >> $II_SYSTEM/ingres/files/install.log"

$ECHO "Removing %product_name%..."
sleep 5

[ -x $rcfile ] && eval $rcfile status >& /dev/null
if [ $? = 0 ]
then
    eval $rcfile stop $inst_log
    if [ $? != 0 ] ; then
	rc=1
        echo "%product_brandname% failed to shutdown, aborting..."
        exit $rc
    fi

fi

#Remove RC files
/sbin/chkconfig --del ingres${inst_id} >& /dev/null
[ -x $II_SYSTEM/ingres/utility/mkrc ] && mkrc -r

# Remove link to CASHCOMP
[ -h $CASHCOMP/%product_brandname%${inst_id} ] && \
rm -f $CASHCOMP/%product_brandname%${inst_id}

#clean up environment files
[ "$II_USERID" ] && \
{
    eval homedir="~"$II_USERID
    for file in `ls -1 $homedir/.ing${inst_id}* 2> /dev/null`
    do
        su $II_USERID -c "rm -f $file"
    done
}   

#remove links in $CASHCOMP if they exist
for file in $CASHCOMP/.ing${inst_id}*
do
    rm -f $file
done

exit $rc

%triggerin -- %rpm_basename%-documentation >= 3.0
#When documentation is installed create link to it
[ -z "$RPM_INSTALL_PREFIX" ] && RPM_INSTALL_PREFIX=%prefix
II_SYSTEM=$RPM_INSTALL_PREFIX
PATH=$II_SYSTEM/ingres/bin:$II_SYSTEM/ingres/utility:$PATH
LD_LIBRARY_PATH=/lib:/usr/lib:$II_SYSTEM/ingres/lib
export II_SYSTEM PATH LD_LIBRARY_PATH

ln -s /usr/share/doc/%rpm_basename%-%rpm_version% $II_SYSTEM/ingres/doc

%triggerun -- %rpm_basename%-documentation >= 3.0
#When documentation is uninstalled remove link
[ -z "$RPM_INSTALL_PREFIX" ] && RPM_INSTALL_PREFIX=%prefix
II_SYSTEM=$RPM_INSTALL_PREFIX
PATH=$II_SYSTEM/ingres/bin:$II_SYSTEM/ingres/utility:$PATH
LD_LIBRARY_PATH=/lib:/usr/lib:$II_SYSTEM/ingres/lib
export II_SYSTEM PATH LD_LIBRARY_PATH

rm -f $II_SYSTEM/ingres/doc

%files
%attr (755,root,root)	%rpm_emb_prefix%/ingres/lib/liboiutil.1.so
%attr (644,root,root)	%rpm_emb_prefix%/ingres/files/mdb/mdb.tar.gz
