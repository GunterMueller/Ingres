#!/bin/bash
#
# Copyright (c) 2004 Ingres Corporation
#
# bang -- Build Another iNGres
#
# Does all build steps in the right order.
#
#

usage='[ -b <build_no> ] [ -nomkmings ] [-dbg]

       Where:

          build_no      is the number of the in-house build level that
                        the "build=" line in VERS should be set to.

       NOTE: Specifying a build number is optional, but be sure the
             build number is up-to-date in VERS or else the version
             number will be wrong in INGRES.

       Use the -nomkmings flag to suppress the running of mkmings.
       WARNING: Use the -nomkmings flag with great care, since
                mkming can be needed for many reasons, not just
                added or deleted files (e.g., NEEDLIBS lines may
                have changed).

       Use the -dbg flag for debug builds of back, cl, common, dbutil, gl,
       and front/st.

       White-space between flags and their arguments is optional.
'

CMD=`basename $0`

# Check for required environment variables
: ${ING_SRC?"must be set"} ${ING_BUILD?"must be set"}

# Check for BAROQUE environment
[ "$ING_VERS" ] && { vers_src="/$ING_VERS/src" ; vers="/$ING_VERS" ; }

versfile=$ING_SRC/tools/port$vers_src/conf/VERS

[ -f $versfile ] ||
{ echo "$CMD: $versfile not found. Exiting..." ; exit 1 ; }

while [ $# -gt 0 ]
do
  case "$1" in
           -b*) if [ `expr $1 : '.*'` -eq 4 ] ; then
                  build_no="`expr $1 : '-b\(.*\)'`" ; shift
                else
                  [ $# -gt 1 ] ||
                  { echo "Usage:" ; echo "$CMD $usage" ; exit 1 ; }
                  build_no="$2" ; shift ; shift
                fi
                case "$build_no" in
                  [0-9][0-9]) ;;
                           *) echo "" ; echo "Illegal build number: $build_no"
                              echo "" ; echo "Usage:" ; echo "$CMD $usage"
                              exit 1
                              ;;
                esac
                ;;
	  -dbg) dbg="-f MINGDBG "
		shift
		;;
    -nomkmings) no_mkmings=true
                shift
                ;;
             *) echo "" ; echo "Usage: $CMD $usage" ; exit 1
                ;;
  esac
done

# Edit VERS
[ "$build_no" ] &&
{
  ed $versfile <<-! >/dev/null 2>&1
  /^build[ ]*=/
  d
  w
  q
!
  echo "build=$build_no" >> $versfile
}

# Build the tools
echo "" ; echo '**** Running BOOT in tools/port/ming ...'
cd $ING_SRC/tools/port$vers_src/ming
sh BOOT
[ "$no_mkmings" ] ||
{
  echo "" ; echo '**** Generating MING files ...'
  mkmings
}
echo "" ; echo '**** Building tools/port ...'
cd $ING_SRC/tools/port$vers_src
mk $MINGFLAGS

# Invoke debug build starting here if opted for
oMINGFLAGS="$MINGFLAGS"
MINGFLAGS="$dbg$MINGFLAGS"

# Build libcompat.a and libmalloc.a
echo "" ; echo '**** Building libcompat.a ...'
cd $ING_SRC/cl/clf$vers_src
mk $MINGFLAGS lib
cd $ING_SRC/gl/glf$vers_src
mk $MINGFLAGS lib

# Build ercompile                       ## Links in libcompat.a and libmalloc.a
echo "" ; echo '**** Building ercompile, etc. ...'
cd $ING_SRC/cl/clf$vers_src/er_unix_win
echo "==== $ING_SRC/cl/clf$vers_src/er_unix_win: mk $MINGFLAGS"
mk $MINGFLAGS

# Build message and header files               ## Depends on ercompile, but this
echo ""                                        ## should change when *.msg files
echo '**** Building .mnx and header files ...' ## move.
cd $ING_SRC/common/hdr$vers/hdr
mkfecat
echo "==== $ING_SRC/common/hdr$vers/hdr: mk $MINGFLAGS files"
# Override any "-j" here or this gets out of sync
ming $MINGFLAGS +j files
ming erclf.h erglf.h erscf.h erusf.h

# Rebuild cs library modules
echo "" ; echo '**** Rebuilding cl/clf/cs_unix modules ...'
cd $ING_SRC/cl/clf$vers_src/cs_unix
echo "==== $ING_SRC/cl/clf$vers_src/cs_unix: mk $MINGFLAGS lib"
mk $MINGFLAGS lib

# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
# Build eqmerge                         ## Depends on libcompat.a 
echo "" ; echo '**** Building eqmerge ...'
cd $ING_SRC/front/tools$vers_src/eqmerge
echo "==== $ING_SRC/front/tools$vers_src/eqmerge: mk $MINGFLAGS"
mk $MINGFLAGS

# Build iyacc                           ## Depends on libyacc.a & libcompat.a
echo ""                                 ## (Needed by front/embed)
echo '**** Building iyacc ...'
cd $ING_SRC/front/tools$vers_src/yycase
echo "==== $ING_SRC/front/tools$vers_src/yycase: mk $MINGFLAGS"
mk $MINGFLAGS
cd $ING_SRC/front/tools$vers_src/yacc
echo "==== $ING_SRC/front/tools$vers_src/yacc: mk $MINGFLAGS lib"
mk $MINGFLAGS lib
echo "==== $ING_SRC/front/tools$vers_src/yacc: mk $MINGFLAGS files"
mk $MINGFLAGS files
echo "==== $ING_SRC/front/tools$vers_src/yacc: mk $MINGFLAGS"
mk $MINGFLAGS 

# Build front header files                        ## Depends on eqc & esqlc
echo "" ; echo '**** Building front/hdr/hdr header files ...'
cd $ING_SRC/front/hdr$vers/hdr                    ## (Needed by front/abf/hdr)
echo "==== $ING_SRC/front/hdr$vers/hdr: mk $MINGFLAGS hdrs"
mk $MINGFLAGS hdrs
echo "" ; echo '**** Building front header files ...'
cd $ING_SRC/front
mk $MINGFLAGS hdrs

# Build embedded language libraries                ## Depends on eqmerge, iyacc,
echo ""                                            ## & ercompile (needed by
echo '**** Building embedded-language libraries ...'    ## eqc & esqlc)
for d in copy dclgen libq libqgca libqxa sqlca equel
{
    cd $ING_SRC/front/embed$vers_src/$d
    echo "==== $ING_SRC/front/embed$vers_src/$d: mk $MINGFLAGS lib"
    mk $MINGFLAGS lib
}

cd $ING_SRC/front/embed$vers_src
echo "==== $ING_SRC/front/embed$vers_src: mk $MINGFLAGS +j lib"
mk $MINGFLAGS +j lib

# Build front utilities libraries                ## Needed by eqc & esqlc
echo "" ; echo '**** Building front utilities libraries ...'
for dir in afe fmt ug
{
  cd $ING_SRC/front/utils$vers_src/$dir
  echo "==== $ING_SRC/front/utils$vers_src/$dir: mk $MINGFLAGS lib"
  mk $MINGFLAGS lib
}

# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
# Build libadf.a                                 ## Needed by eqc & esqlc
echo "" ; echo '**** Building libadf.a ...'
cd $ING_SRC/common/adf$vers_src
mk $MINGFLAGS lib

# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
# Build eqc and esqlc
echo "" ; echo '**** Building eqc and esqlc ...'
for dir in c csq                          ## Depends on embedded-language libs,
{                                         ## front utilities libs, libadf.a &
  cd $ING_SRC/front/embed$vers_src/$dir   ## libcompat.a
  echo "==== $ING_SRC/front/embed$vers_src/$dir: mk $MINGFLAGS +j"
  mk $MINGFLAGS +j
}

# Build header files
echo "" ; echo '**** Building common/hdr/hdr header files ...'
cd $ING_SRC/common/hdr$vers/hdr
echo "==== $ING_SRC/common/hdr$vers/hdr: ming $MINGFLAGS hdrs"
ming $MINGFLAGS hdrs
echo "" ; echo '**** Building dbutil header files ...'
cd $ING_SRC/dbutil
mk $MINGFLAGS hdrs
echo "" ; echo '**** Rebuilding front header files ...'
cd $ING_SRC/front
mk $MINGFLAGS hdrs

# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
# Build the backend yacc
echo "" ; echo '**** Building byacc ...'
cd $ING_SRC/back/psf$vers_src/yacc
echo "==== $ING_SRC/back/psf$vers_src/yacc: mk $MINGFLAGS lib"
mk $MINGFLAGS lib
echo "==== $ING_SRC/back/psf$vers_src/yacc: mk $MINGFLAGS"
mk $MINGFLAGS

# Build libpsf.a
echo "" ; echo '**** Building libpsf.a ...'

# XXX would be nice to limit +j to the *gram.o files
# to do this we need to leave them around in the directory
# perhaps need a modified DO.O.C which preserves them.

cd $ING_SRC/back/psf$vers_src/psl
echo "==== $ING_SRC/back/psf$vers_src/psl: mk $MINGFLAGS +j lib"
mk $MINGFLAGS +j lib
echo "==== $ING_SRC/back/psf$vers_src/psl: mk $MINGFLAGS"
mk $MINGFLAGS

# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
echo "" ; echo '**** Building {common,dbutil,back} libraries ...'
for dir in common dbutil back            ## dbutil depends on eqc & esqlc
{
  cd $ING_SRC/$dir
  mk $MINGFLAGS lib
}
# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
echo "" ; echo '**** Building tools libraries ...'
cd $ING_SRC/tools
mk $MINGFLAGS lib

# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
# Build backend, dbutil, and common executables
echo "" ; echo '**** Building CL executables ...'
cd $ING_SRC/cl/clf$vers_src
mk $MINGFLAGS
cd $ING_SRC/gl/glf$vers_src
mk $MINGFLAGS
for dir in back dbutil common
{
  echo "" ; echo "**** Building $dir executables ..."
  cd $ING_SRC/$dir
  mk $MINGFLAGS
}
# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
for dir in admin tools 
{
  echo "" ; echo "**** Building $dir executables ..."
  cd $ING_SRC/$dir
  mk $MINGFLAGS
}
# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
# Build iimerge.o
echo "" ; echo '**** Building iimerge.o ...'
cd $ING_SRC/back/dmf$vers_src/specials_unix
echo "==== $ING_SRC/back/dmf$vers_src/specials_unix: ming $MINGFLAGS"
ming $MINGFLAGS

# Build iimerge and its associated executables
echo "" ; echo '**** Linking iimerge.o executables ...'
iilink -standard -noudt

# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
# Build collation files
echo "" ; echo '**** Building collation files ...'
cd $ING_SRC/common/adf$vers_src/adm
echo "==== $ING_SRC/common/adf$vers_src/adm: mk $MINGFLAGS"
mk $MINGFLAGS

# Build frontend files
echo "" ; echo '**** Building front-end files ...'
cd $ING_SRC/front
mk $MINGFLAGS files

# Build the remainder of the front-end libraries
echo "" ; echo '**** Building front-end libraries ...'
# build abf grammars +j for non-parallel
for dir in quel sql
{
    [ -d $ING_SRC/front/abf$vers_src/$dir ] && 
    {
        cd $ING_SRC/front/abf$vers_src/$dir
        echo "==== $ING_SRC/front/abf$vers_src/$dir: mk $MINGFLAGS +j lib"
        mk $MINGFLAGS +j lib
    }
}
# build frame/valid grammars +j for non-parallel
cd $ING_SRC/front/frame$vers_src/valid
echo "==== $ING_SRC/front/frame$vers_src/valid: mk $MINGFLAGS +j lib"
mk $MINGFLAGS +j lib
cd $ING_SRC/front
mk $MINGFLAGS lib

# Build shared libs if available
mkshlibs

# Build vec31
[ -d $ING_SRC/vec31 ] &&
{
  echo "" ; echo '**** Building vec31 ...'
  cd $ING_SRC/vec31
  mk $MINGFLAGS exe
  mk $MINGFLAGS files
}

# Build the remainder of the front-end executables
echo "" ; echo '**** Building front-end executables ...'
cd $ING_SRC/front
mk $MINGFLAGS

# Build libingres.a
echo "" ; echo '**** Building libingres.a ...'
mergelibs

# Build testtools, SIG
for dir in testtool sig
{
  [ -d $ING_SRC/$dir ] &&
  {
    echo "" ; echo "**** Building $dir ..."
    cd $ING_SRC/$dir
    mk $MINGFLAGS hdrs lib files exe
  }
}

# Build tech
[ -d $ING_SRC/tech ] &&
{
  echo "" ; echo '**** Building technical notes ...'
  cd $ING_SRC/tech
  mk $MINGFLAGS
}

# Recheck the world...should come up clean

# Turn debug builds on
MINGFLAGS="$dbg$MINGFLAGS"
for dir in cl common back dbutil 
{
  [ -d $ING_SRC/$dir ] &&
  {
    echo "" ; echo "**** Final check for $dir ..."
    cd $ING_SRC/$dir
    mk $MINGFLAGS
  }
}
# turn off dbg builds here
MINGFLAGS="$oMINGFLAGS"
for dir in tools vec31 front admin sig testtool tech
{
  [ -d $ING_SRC/$dir ] &&
  {
    echo "" ; echo "**** Final check for $dir ..."
    cd $ING_SRC/$dir
    mk $MINGFLAGS
  }
}

echo "$CMD done: `date`"
exit 0
