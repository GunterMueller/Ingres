#!/bin/bash
#  Copyright (c) 1993, 2005 Ingres Corporation
# 
# 
#1
#1  Name: ipcclean
#1
#1  Usage:
#1
#2    For stand-alone or non-NUMA cluster configurations:
#2
#1	   ipcclean
#1
#2    For NUMA cluster configurations:
#2
#2	   ipcclean { -r[ad]{=| }<rad_id> | -n[ode]{=| }<node_name> } ... \
#2		    | -local
#2
#2	where <rad_id> is a valid RAD id configured on the local host,
#2	and <node_name> is a valid node name or node alias (nickname)
#2	for a node on the local host, and "-local" targets all RADs
#2	configured on the local host.
#2
#1  Description:
#1	Removes INGRES shared memory key files and semaphore resources.
#1
#  DEST = utility
#----------------------------------------------------------------------------

. iisysdep

self=`basename $0`

#
#	clean_shared - guts of ipcclean.  Remove shared memory for one node
#
clean_shared()
{
# build keys list based on csreport
keys="`csreport $1 | grep '^.key' | grep -v 'size 0' | sed 's/.....\(.*\): .*/\1/'`" 
# add to keys list based on lgkmkey
# keys="`lgkmkey $1` $keys"

# "-local" flag forces pmhost to evaluate any passed NUMA context args,
# and to supress echo of host name if args are invalid, or NUMA clustering
# is in use, and no arguments establishing the NUMA context were provided.
NODE="`iipmhost $1 -local`"
[ $NODE ] ||
{
    cat << !
$self: RAD context argument missing.

!
    exit 1
}

GETRES="`iigetres ii.$NODE.config.cluster_mode | \
 tr '[a-z]' '[A-Z]'`"
if [ "X$GETRES" != "XON" ];
then
    MEMDIR="."
else
    MEMDIR="$NODE"
fi

# add to keys list based on files in ingres/files/memory
cd $II_SYSTEM/ingres/files/memory/$MEMDIR

for MEMNAME in *
do
	if [ -f "$MEMNAME" ]
	then
	case $VERS in
	        *_lnx|int_rpl)
		shmkey="`iimemkey $MEMNAME`"
		ipcrm shm $shmkey >> /dev/null 2>&1
		;;
	    axp_lnx)
		shmkey="`iimemkey $MEMNAME`"
		shmid="`ipcs -m | egrep -i $shmkey | awk '{ print $2 }'`"
		ipcrm shm $shmkey >> /dev/null 2>&1
		;;
	      *_osx)
		outfile=/tmp/ipcclean.$$
		shmkey="`iimemkey $MEMNAME`"
		shmid="`ipcs -m | egrep -i -- $shmkey | awk '{ print $2 }'`"
		ipcrm -m $shmid >> $outfile 2>&1
		[ $? != 0 ] && cat $outfile
		rm -f $outfile
		keys=$shmkey
		;;
	    *)
		keys="`iimemkey $1 $MEMNAME` $keys"
		;;
	esac
	fi
done
if [ ! -z "$keys" ]
then
    case $VERS in
	a64_us5)
    	    pattern=`echo $keys | sed -e "s/0x00*/0x0*/g" | sed "s/ / | /g" | tr "ABCDEF" "abcdef"`
	    ;;
	su4_us5)
    	    pattern=`echo $keys | sed -e "s/0x00*/0x0*/g" | sed "s/ / | /g" | tr "ABCDEF" "abcdef"`
	    ;;
	*)
    	    pattern=`echo $keys | sed "s/ / | /g" | tr "ABCDEF" "abcdef"`
	    ;;
    esac
    if [ "$pattern" ]
    then
        case $VERS in
            sqs_ptx)
                $IPCRM `$IPCSCMD | egrep "$pattern" | sed "s/\(. *[^ ]*\).*/-\1/
"`
                ;;
	        *_lnx|int_rpl)
		shmkey=`ipcs -s | egrep -i "$pattern" | awk '{ print $2 }'`
		ipcrm sem $shmkey  >> /dev/null 2>&1
                ;;
	        *_osx)
		outfile=/tmp/ipcclean.$$
		shmkey=`ipcs -s | egrep -i -- "$pattern" | awk '{ print $2 }'`
		ipcrm -s $shmkey  >> $outfile 2>&1
		[ $? != 0 ] && cat $outfile
		rm -f $outfile
                ;;
            *)
                 $IPCRM `$IPCSCMD | egrep "$pattern" | sed "/\(. *[^ ]*\).*/s//-\1/"`
         ;;
        esac
    fi
fi

for f in `ls $II_SYSTEM/ingres/files/memory/$MEMDIR`
do
    [ -f $II_SYSTEM/ingres/files/memory/$MEMDIR/$f ] && \
     rm -f $II_SYSTEM/ingres/files/memory/$MEMDIR/$f
done
}

#
#	add_rad - Verify & add one RAD to to do list
#
add_rad()
{
    [ -n "$1" ] ||
    {
	cat << !

$self: missing rad value.
!
	exit 1
    }

    [ "`echo $1 | sed 's/[0-9]*//'`" ] &&
    {
	cat << !

$self: bad rad value ($1).
!
    }

    [ "`iipmhost -rad $1`" ] ||
    {
	cat << !

$self: rad "$1" is not configured on host "`iipmhost`".
!
	exit 1
    }
    to_do_list="$to_do_list -rad=$1"
}

#
#	add_node - Verify & add one local node to "to do" list
#
add_node()
{
    [ -n "$1" ] ||
    {
	cat << !

$self: missing node value.
!
	exit 1
    }

    [ "`iipmhost -node $1`" ] ||
    {
	cat << !

$self: node "$1" is not configured on host "`iipmhost`".
!
	exit 1
    }
    to_do_list="$to_do_list -node=$1"
}

#
#	MAIN
#
to_do_list=""
while [ -n "$1" ]
do
    case "$1" in
    -rad=*|-r=*)
	add_rad "`echo $1 | sed 's/-r[ad]*=\(.*\)/\1/'`"
	;;
    -rad|-r)
	shift
	add_rad "$1"
	;;
    -node=*|-n=*)
	add_node "`echo $1 | sed 's/-n[ode]*=\(.*\)/\1/'`"
	;;
    -node|-n)
	shift
	add_node "$1"
	;;
    -local)	# Clean all local RADs
	rads="`iinumainfo -radcount`"
	while [ $rads -gt 0 ]
	do
	    [ -n "`iipmhost -rad=$rads`" ] && add_rad $rads
	    rads=`expr $rads - 1`
	done
	;;
    *)	# dump usage
	mask="1"
	$CLUSTERSUPPORT && [ 0 -ne `iinumainfo -radcount` ] && mask="12"
	cat $0 | grep "^#[$mask]" | sed 's/^#.//'
	exit 1
	;;
    esac
    shift
done

if [ -n "$to_do_list" ]
then
    for target in $to_do_list
    do
	clean_shared "$target"
    done
else
    clean_shared
fi
